import numpy as np
import pandas as pd
from matplotlib.pyplot import subplots

# We import our standard libraries at this top level



import statsmodels.api as sm


from statsmodels.stats.outliers_influence import variance_inflation_factor as vif
from statsmodels.stats.anova import anova_lm


!pip install ISLP

from ISLP import load_data
from ISLP.models import (ModelSpec as MS, summarize,poly)

A = np.array([3, 5, 11])
print("Array A:", A)
print("Sum:", A.sum())



Boston = load_data("Boston")
Boston.columns


       #lstat : lower status of the population.
       #medv median value of owner occupied house.

X= pd.DataFrame({'intercept' : np.ones(Boston.shape[0]),
                  'lstat' : Boston['lstat']})

X[:4]

y = Boston['medv']
model = sm.OLS(y, X)
model = sm.OLS(y, X)      # Modeli tanımla
results = model.fit()     # Modeli eğit
summarize(results)        # Sonuçları göster


design = MS(['lstat'])

design = design.fit(Boston)
X = design.transform(Boston)
X[:4]


results.summary()

results.params

new_df = pd.DataFrame({'lstat':[5, 10, 15]})
newX = design.transform(new_df)
newX

new_predictions = results.get_prediction(newX);
new_predictions.predicted_mean
new_predictions.conf_int(alpha=0.05)
new_predictions.conf_int(obs=True, alpha=0.05)


def abline(ax,b,m):
  "Add a line wih slope b and intercept m to an axes"
  xlim = ax.get_xlim()
  ylim = [m * xlim[0] + b, m * xlim[1] + b]
  ax.plot(xlim, ylim)

def abline(ax,b,m,*args,**kwargs):
  "Add a line wih slope b and intercept m to an axes"
  xlim = ax.get_xlim()
  ylim = [m * xlim[0] + b, m * xlim[1] + b]
  ax.plot(xlim, ylim, *args, **kwargs)


ax = Boston.plot.scatter('lstat','medv')

abline(ax, results.params[0], results.params[1],'r--',linewidth =3)


ax = subplots(figsize=(8,8))[1]
ax.scatter(results.fittedvalues, results.resid)
ax.set_xlabel('Fitted value')
ax.set_ylabel('Residual')
ax.axhline(0, c='k', ls='--');




infl = results.get_influence()
ax = subplots(figsize=(8,8))[1]
ax.scatter(np.arange(X.shape[0]), infl.hat_matrix_diag)
ax.set_xlabel('Index')
ax.set_ylabel('Leverage')
np.argmax(infl.hat_matrix_diag)

X = MS(['lstat', 'age']).fit_transform(Boston)
model1 = sm.OLS(y,X)
results1 = model1.fit()
summarize(results1)


terms = Boston.columns.drop('medv')
terms


X = MS(terms).fit_transform(Boston)
model = sm.OLS(y,X)
results = model.fit()
summarize(results)


minus_age = Boston.columns.drop([ 'medv' , 'age' ])
# Changed fit_4transform to fit_transform
Xma = MS(minus_age).fit_transform(Boston)
model1= sm.OLS(y,Xma)
summarize(model1.fit())



vals = [vif(X,i)
        for i in range (1,X.shape[1])]

# Assign the DataFrame to a different variable name, e.g., vif_df
vif_df = pd.DataFrame({'vif' : vals }, index = X.columns[1:])

vals = []
for i in range (1,X.values.shape[1]):
  # Now, the imported vif function is still accessible
  vals.append(vif(X.values,i))

vif


vals = []
for i in range (1,X.values.shape[1]):
  vals.append(vif(X.values,i))

X = MS(['lstat',
        'age',
        ('lstat', 'age')]).fit_transform(Boston)
model2 = sm.OLS(y,X)
summarize(model2.fit())



X = MS([poly('lstat',degree = 2),'age']).fit_transform(Boston)
model2 = sm.OLS(y,X)
# Changed model3 to model2 and result3 to results3
results3 = model2.fit()
summarize(results3)



anova_lm(results1,results3)




ax = subplots(figsize=(8,8))[1]
ax.scatter(results3.fittedvalues ,results3.resid)
ax.set_xlabel('Fitted Value')
ax.set_ylabel('residual')
ax.axhline(0,c ='k',ls ='--')



Carseats = load_data('Carseats')
Carseats.columns



allvars = list(Carseats.columns.drop('Sales'))
y = Carseats['Sales']
# Changed the interaction terms from tuples to strings with a colon separator
final = allvars + [('Income', 'Advertising'), ('Price', 'Age')]
X = MS(final).fit_transform(Carseats)
model = sm.OLS(y,X)
summarize(model.fit())













